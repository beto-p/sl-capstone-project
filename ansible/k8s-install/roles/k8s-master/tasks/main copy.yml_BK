---

- name: Update "apt update"
  apt: update_cache=yes

- name: Install dependencies
  apt: name={{ item }} state=present update_cache=yes
  with_items:
   - apt-transport-https
   - ca-certificates 
   - curl
   - gnupg
   - software-properties-common 
   - lsb-release


#- name: Docker keyring directory
#  file:
#    path: /etc/apt/keyrings
#    state: directory

- name: Dockers official GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repo
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
#    updat_cache: yes

- name: Install Docker engine and dependencies
  apt: name={{ item }} state=present
  with_items:
   - docker-ce
   - docker-ce-cli
   - containerd.io
   - docker-compose-plugin

- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: true

# Install CRIDockerd

- name: Create temporary directory
  tempfile:
    state: directory
  register: temp_dir

- name: Download cri-dockerd tar
  get_url:
    url: "https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.0/cri-dockerd-0.3.0.amd64.tgz"
    dest: "{{ temp_dir.path }}/cri-dockerd-0.3.0.amd64.tgz"

- name: Extract cri-dockerd tar
  unarchive:
    src: "{{ temp_dir.path }}/cri-dockerd-0.3.0.amd64.tgz"
    dest: /usr/local/bin
    remote_src: yes

- name: Set permissions on cri-dockerd binary
  file:
    path: /usr/local/bin/cri-dockerd
    mode: "u+x"

#Kubernetes Installation
- name: Kubernetes APT key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Kubernetes APT repository
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: Install Kubernetes packages
  apt:
    name: kubelet={{ kubernetes_version }}-00 kubeadm={{ kubernetes_version }}-00 kubectl={{ kubernetes_version }}-00
    update_cache: yes

- name: Enable and start Docker service
  service:
    name: docker
    enabled: true
    state: started

- name: Enable and start CRIDockerd service
  service:
    name: cri-dockerd
    enabled: true
    state: started

- name: Initialize Kubernetes cluster on master
  command: kubeadm init --ignore-preflight-errors=all
  when: inventory_hostname == 'K8sMaster'
  register: kubeadm_output

- name: Save join command for worker nodes
  lineinfile:
    dest: /home/{{ ansible_user }}/kubeadm_join.sh
    line: "{{ kubeadm_output.stdout_lines[-1] }}"
  when: inventory_hostname != 'K8sMaster'

- name: Copy join script to worker nodes
  copy:
    src: /home/{{ ansible_user }}/kubeadm_join.sh
    dest: /home/{{ ansible_user }}/kubeadm_join.sh
  when: inventory_hostname != 'K8sMaster'

- name: Install Calico network driver
  command: kubectl apply -f https://docs.projectcalico.org/{{ calico_version }}/manifests/calico.yaml
  when: inventory_hostname == 'K8sMaster'